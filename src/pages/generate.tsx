import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { Alert, AlertDescription } from "./components/alert";
import { Upload, AlertCircle, Sparkles } from "lucide-react";
import { Button } from "./components/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "./components/card";
import Link from "next/link";
import Image from "next/image";
import { api } from "~/utils/api";
import Head from "next/head";
import { Modal } from "./components/modal"; // Assuming Modal is a reusable component

export default function Generate() {
  const GenerateAPI = api.generate.generateImage.useMutation();
  const router = useRouter();
  const { data: session, status } = useSession();

  useEffect(() => {
    if (status !== "authenticated") {
      router.push("/");
    }
  }, [status, router]);

  const [uploadedImage, setUploadedImage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [generatedImageBase64, setGeneratedImageBase64] = useState<string | null>(null);
  const [statusMessage, setStatusMessage] = useState("Starting...");

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      if (file.size > 10 * 1024 * 1024) {
        setError("Image size should be less than 10MB");
        return;
      }
      const reader = new FileReader();
      reader.onload = () => {
        const base64String = reader.result as string;
        setUploadedImage(base64String);
        setError(null);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleGenerate = async () => {
    if (!uploadedImage) {
      setError("Please upload an image first");
      return;
    }

    try {
      setLoading(true);
      setIsModalOpen(true); // Open modal when generation starts

      // Start image generation and receive the generated base64 image
      const generateResponse = await GenerateAPI.mutateAsync({
        image: uploadedImage,
      });
      console.log(generateResponse)
      if (typeof generateResponse === "string") {
        setGeneratedImageBase64(`data:image/jpeg;base64,${generateResponse}`);
        setStatusMessage("Completed!");
      } else {
        // Handle cases where the response is not a string (e.g., an error message)
        setError("Unexpected response format. Please try again.");
        setGeneratedImageBase64(null);
      }
    } catch (err) {
      setError("Failed to generate image. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Head>
        <title>CartoonTrait</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen pt-16 flex flex-col items-center justify-center bg-gradient-to-b from-background to-muted/20 p-4 md:p-8">
        <div className="fixed top-4 left-1/2 -translate-x-1/2 w-full max-w-md z-50">
          {error && (
            <Alert variant="destructive" className="animate-in fade-in slide-in-from-top-2 duration-300">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
        </div>

        <Card className="w-full max-w-4xl mt-16">
          <CardHeader className="space-y-4">
            <div className="flex justify-center">
              <Link href="/" className="flex items-center gap-2 text-primary hover:opacity-90 transition-opacity">
                <span className="text-2xl font-bold">CartoonAI</span>
              </Link>
            </div>
            <div className="text-center space-y-2">
              <CardTitle className="text-2xl">Generate Cartoon Image</CardTitle>
              <CardDescription>Transform your photo into a cartoon style</CardDescription>
            </div>
          </CardHeader>

          <CardContent className="space-y-8">
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">1. Upload Your Image</h3>
              <div className="border-2 border-dashed rounded-lg p-6 flex flex-col items-center gap-4">
                {uploadedImage ? (
                  <div className="relative w-full max-w-md aspect-square">
                    <Image src={uploadedImage} alt="Uploaded image" fill className="object-cover rounded-lg" />
                    <Button variant="secondary" className="absolute bottom-4 right-4" onClick={() => setUploadedImage(null)}>
                      Change Image
                    </Button>
                  </div>
                ) : (
                  <label className="cursor-pointer w-full max-w-md">
                    <div className="bg-muted rounded-lg p-8 flex flex-col items-center gap-4 hover:bg-muted/80 transition-colors">
                      <Upload className="h-8 w-8 text-muted-foreground" />
                      <div className="text-center">
                        <p className="font-medium">Click to upload</p>
                        <p className="text-sm text-muted-foreground">or drag and drop</p>
                        <p className="text-xs text-muted-foreground mt-2">PNG, JPG up to 10MB</p>
                      </div>
                    </div>
                    <input type="file" className="hidden" accept="image/*" onChange={handleImageUpload} />
                  </label>
                )}
              </div>
            </div>
          </CardContent>

          <CardFooter className="flex flex-col gap-4">
            <Button size="lg" className="w-full max-w-md" onClick={handleGenerate} disabled={!uploadedImage || loading}>
              {loading ? (
                <>
                  <span className="animate-spin mr-2">âš¡</span>
                  Generating...
                </>
              ) : (
                <>
                  <Sparkles className="mr-2 h-4 w-4" />
                  Generate Cartoon
                </>
              )}
            </Button>
            <p className="text-sm text-muted-foreground text-center">Processing may take up to 20 seconds</p>
          </CardFooter>
        </Card>
        <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
          <div className="flex flex-col items-center justify-center space-y-8 py-6">
            {!generatedImageBase64 ? (
              <>
                <div className="w-20 h-20 border-4 border-primary border-t-transparent rounded-full animate-spin" />
                <div className="text-center space-y-3">
                  <h3 className="text-2xl font-semibold text-gray-800">{statusMessage}</h3>
                  <p className="text-base text-gray-600">Please wait while we work our magic...</p>
                </div>
              </>
            ) : (
              <>
                <div className="text-center space-y-3 mb-8">
                  <h3 className="text-3xl font-bold bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent">
                    Your Cartoon is Ready!
                  </h3>
                  <p className="text-gray-600 text-lg">Here's your transformed image</p>
                </div>
                <div className="relative w-full aspect-square max-w-3xl mx-auto">
                  <Image
                    src={generatedImageBase64}
                    alt="Generated Cartoon"
                    fill
                    className="object-contain rounded-lg"
                  />
                </div>
                <div className="flex gap-6 mt-8">
                  <Button size="lg" onClick={() => {
                    const link = document.createElement('a');
                    link.href = generatedImageBase64;
                    link.download = 'cartoon_image.png';
                    link.click();
                  }}>
                    Download Image
                  </Button>
                  <Button size="lg" variant="outline" onClick={() => {
                    setIsModalOpen(false);
                    setGeneratedImageBase64(null);
                    setUploadedImage(null);
                  }}>
                    Generate Another
                  </Button>
                </div>
              </>
            )}
          </div>
        </Modal>
      </main>
    </>
  );
}
